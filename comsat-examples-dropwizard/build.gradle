configurations {
    quasar
}

dependencies {
    compile "co.paralleluniverse:comsat-dropwizard:$comsatVersion"
    runtime 'org.apache.derby:derby:10.10.1.1'    
    compile 'io.dropwizard:dropwizard-assets:0.7.1'
    compile  "co.paralleluniverse:quasar-core:$quasarVersion"
    quasar  "co.paralleluniverse:quasar-core:$quasarVersion"
    compile(group: 'com.wordnik', name: 'swagger-jaxrs_2.10', version:'1.3.5') {
        exclude(module: 'jackson-jaxrs-json-provider')
        exclude(module: 'commons-lang')
        exclude(module: 'slf4j-api')
        exclude(module: 'paranamer')
        exclude(module: 'jackson-databind')
        exclude(module: 'javassist')
        exclude(module: 'joda-time')
        exclude(module: 'jackson-core')
        exclude(module: 'jackson-annotations')
        exclude(module: 'jsr311-api')
    }
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.netflix.nebula:gradle-ospackage-plugin:2.2.0"
    }
}


apply plugin: 'rpm'

task fooRpm(type: Rpm) {
    packageName 'comsat-examples-dropwizard'
    version '0.0.1'
    release '1'
    arch I386
    os LINUX

//    installUtils = file('scripts/rpm/utils.sh')
//    preInstall file('scripts/rpm/preInstall.sh')
//    postInstall file('scripts/rpm/postInstall.sh')
//    preUninstall file('scripts/rpm/preUninstall.sh')
//    postUninstall file('scripts/rpm/postUninstall.sh')

//    requires('bar', '2.2', GREATER | EQUAL)
//    requires('baz', '1.0.1', LESS)
//    requires('qux')

    into '/opt/comsat-examples-dropwizard'

    from(jar.outputs.files) {
        into 'lib'
    }
    from(configurations.runtime) {
        into 'lib'
    }
    from('lib') {
        into 'lib'
    }
    from('scr/main/bin') {
        into 'bin'
        exclude 'database'
        fileMode 0550
    }
    from('src/main/conf') {
        fileType CONFIG | NOREPLACE
        into 'conf'
    }
    from('home') {
        // Creating directory entries (or not) in the RPM is normally left up to redline-rpm library.
        // Use this to explicitly create an entry -- for setting directory fileMode on system directories.
        createDirectoryEntry = true
        fileMode 0500
        into 'home'
    }
//    from('endorsed') {
//        // Will tell redline-rpm not to auto create directories, which
//        // is sometimes necessary to avoid rpm directory conflicts
//        addParentDirs false
//        into '/usr/share/tomcat/endorsed'
//    }

    link('/etc/init.d/comsat-examples-dropwizard.init', '/opt/comsat-examples-dropwizard/bin/comsat-examples-dropwizard.init')

}


tasks.withType(JavaExec) {
    main = mainClass
    jvmArgs "-javaagent:${configurations.quasar.iterator().next()}" // =v, =d
    jvmArgs '-server'
    jvmArgs '-Xmx1024m'
    //    jvmArgs "-ea"
    classpath = sourceSets.main.runtimeClasspath 
    args "server", "hello-world.yml"
    systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
}

task(runSimple, dependsOn: 'classes', type: JavaExec) {
    main = 'com.example.helloworld.HelloWorldApplication'
    // args "server", "hello-world.yml"
}

mainClassName = "com.example.helloworld.HelloWorldApplication"

// inject javaagent into the distribution
applicationDefaultJvmArgs = [
        "-javaagent:\$APP_HOME/lib/quasar-core-${quasarVersion}.jar", "-server",
        '-Dco.paralleluniverse.fibers.verifyInstrumentation=true'
]


// $ symbol gets escaped in script anyway:( so we need to replace it.
startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('\\$APP_HOME', '\$APP_HOME')
        // do something like this for Windows scripts also
    }
}

applicationDistribution.from('.') {
    include 'hello-world.yml'
    into "conf"
}

applicationDistribution.from('src/main/bin') {
    include '*'
    into "bin"
    fileMode 0755
}

applicationDistribution.from('.') {
    include 'readme.txt'
    into "."
}

defaultTasks 'runSimple'

